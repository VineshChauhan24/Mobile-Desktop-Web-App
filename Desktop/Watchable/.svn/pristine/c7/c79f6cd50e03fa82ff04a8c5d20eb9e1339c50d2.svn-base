package comcast.test.app.testCases.videoManagement.videoSubscriptionManagement.freeSubscribedChannels.Channels.ChannelsCategory;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.interactions.Actions;

import comcast.test.app.common.AssertionRepo.common.AssertionRepoFunctions;
import comcast.test.app.common.constant.XidioConstant;
import comcast.test.app.common.userManagement.userLogin.common.UserLoginFunctions;
import comcast.test.app.common.videoManagement.subscriptionsPage.common.SubscriptionsPageCommonFunctions;
import comcast.test.config.configServices.utils.BaseTest;
import comcast.test.config.configServices.utils.RestAPIServices;
import comcast.test.config.dataServices.subscribeFreeFeaturedChannelFromHome.DS_SubscribeAFreeChannelFromHomeFeatured;
import comcast.test.config.dataServices.vo.VideoDetails;

/** 
 * Class Name: VerifyDuplicateSubscribedShowsWhenDoubleClickOnShows
 * Description: This test case is to verify if the duplicate shows are displayed
 * after double clicking on 'CATEGORIES' link for a subscribed channel displayed on My Channels screen
 * by logging into Gazeebo application.
 */

public class VerifyDuplicateSubscribedShowsWhenDoubleClickOnShows extends BaseTest{
	
	DS_SubscribeAFreeChannelFromHomeFeatured subscribeFreeHomeChannel=new DS_SubscribeAFreeChannelFromHomeFeatured();
	UserLoginFunctions userLogin=new UserLoginFunctions();
	AssertionRepoFunctions assertionFunction=new AssertionRepoFunctions();
	SubscriptionsPageCommonFunctions subscriptionsPageCommonFun=new SubscriptionsPageCommonFunctions();
	
	@Test
	public void testVerifyDuplicateSubscribedShowsWhenDoubleClickOnShows() throws Exception {
		
		try{
			/* This Method is to register new user using Gazeebo application 
			 * and to change a password. 
			 */
			subscribeFreeHomeChannel.RegisterAndSubscribeAFreeChannelHomeFeatured();
			
			Map<String, List<VideoDetails>> videoDetails=RestAPIServices.subscribedChannelDetails();
			List<VideoDetails> subscribedChannels=videoDetails.get("subscribedChannels");
			List<VideoDetails> subscribedChannelsShows=videoDetails.get("subscribedShowsUnderChannel");
			
			driver.findElement(By.linkText("Log In")).click();
			
			//This Method is used to enter user name and password credentials
			userLogin.UserLoginCredentials(driver);
			
			driver.findElement(By.id("user_login")).click();
			
			//This method is to ensure Home is Active page when Login into Application.
			assertionFunction.assertHomeActiveLink();
			
		    //This method is to navigate My Channels Page.
			subscriptionsPageCommonFun.navigateToMyChannelsPage();
			
			//This method is to ensure My Channels is Active page when Login into Application.
			assertionFunction.assertMyChannelsActiveLink();
		    
		    assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+subscribedChannels.get(XidioConstant.selectSubscribedChannel).getTitle()+"[\\s\\S]*$"));
		    
		    Thread.sleep(sleepTime);
			Actions action=new Actions(driver);
			action.doubleClick(driver.findElement(By.linkText("SHOWS")));
			action.perform();
			
			//action.doubleClick(driver.findElement(By.linkText("CHANNELS")));
			//action.doubleClick(driver.findElement(By.linkText("CATEGORIES")));
			
			Thread.sleep(sleepTime);
			boolean isDuplicate=driver.findElements(By.xpath(".//*[@id='content-wrap']/article/section/article/div/div[3]/section/ul")).size()>0;
			if(isDuplicate==true)
			{
				String getShowsTitle=driver.findElement(By.xpath(".//*[@id='content-wrap']/article/section/article/div/div[3]/section/ul/li[1]/article/h1/a")).getText();
				assertFalse(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+getShowsTitle+"[\\s\\S]*$"));
			}
		    Thread.sleep(sleepTime);
		    assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+subscribedChannelsShows.get(XidioConstant.selectSubscribedShow).getTitle()+"[\\s\\S]*$"));
		    
		  //This method unsubscribe a subscribed channels.
	        subscriptionsPageCommonFun.unSubscribeASubscribedChannels();
	        
		    //This method is used to logout from Gazeebo Application.
		    userLogin.LogOut(driver);
		    
		    //This method is to ensure Login page is displayed when user Sign Out from Application.
		    assertionFunction.assertLoginPageDetails();
		}
		catch (Throwable t) {
			captureScreenshot();
			collector.addError(t);
		}
	}
}
