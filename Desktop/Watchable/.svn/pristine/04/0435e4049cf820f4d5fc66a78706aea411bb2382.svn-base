package comcast.test.app.testCases.videoManagement.videoHomeManagement.HomePageTestCases;

import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.Test;
import org.openqa.selenium.By;

import comcast.test.app.common.UILablesRepo;
import comcast.test.app.common.XpathObjectRepo;
import comcast.test.app.common.AssertionRepo.common.AssertionRepoFunctions;
import comcast.test.app.common.userManagement.userLogin.common.UserLoginFunctions;
import comcast.test.config.configServices.utils.BaseTest;
import comcast.test.config.configServices.utils.RestAPIServices;
import comcast.test.config.dataServices.registerToXidioApplicationAndChangeAPassword.RegisterToXidioApplicationAndChangeAPassword;
import comcast.test.config.dataServices.vo.VideoDetails;

/**
 * Class Name: VerifyHomeCategoryVideosAreDisplayed Description: This test case
 * is used to verify Home category video/videos are displayed for registered
 * Watchable Application user.
 * **/

public class VerifyHomeCategoryVideosAreDisplayed extends BaseTest {

	RegisterToXidioApplicationAndChangeAPassword RegUserAndChangePass = new RegisterToXidioApplicationAndChangeAPassword();
	AssertionRepoFunctions assertionFunction = new AssertionRepoFunctions();
	UserLoginFunctions userLogin = new UserLoginFunctions();

	@Test
	public void testVerifyHomeCategoryVideosAreDisplayed() throws Exception {

		List<VideoDetails> videoDetails = RestAPIServices.nhomePageAPIs();

		try {
			/*
			 * This Method is to register new user using Watchable application
			 * and to change a password.
			 */
			RegUserAndChangePass.RegisterToComcastAppAndChangePassword(driver);
			int loginError = driver
					.findElements(
							By.xpath(XpathObjectRepo.SIGNUPPAGE_INCORRECT_CREDENTIALS_MSG_XPATH))
					.size();

			if (loginError == 0) {

				// This method is to ensure Home is Active page when Login into
				// Application.
				assertionFunction.assertHomeActiveLink();

				// This method is to assert Watchable Top Middle Menu and to
				// ensure
				// its collapsed.
				// assertionFunction.assertGazeeboTopMiddleMenu();

				// This method asserts Watchable Logo.
				assertionFunction.assertWatchableLogo();

				// This method is to assert all Header links After logging into
				// application.
				assertionFunction.assertAllHeaderLinkAfterLogin();

				// Manoj: Objects Modified and moved to XpathObjectRepo file

				// assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+orProUtil.getProperty("UPNEXT")+"[\\s\\S]*$"));
				assertTrue(driver
						.findElement(
								By.xpath(XpathObjectRepo.YOUAREWATCHINGHEADERLABEL_XPATH))
						.getText()
						.matches(UILablesRepo.HOMEPAGE_YOUAREWATCHING));
				// assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+videoDetails.get(0).getTitle()+"[\\s\\S]*$"));

				Thread.sleep(sleepTime);
				// assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+orProUtil.getProperty("FEATURED")+"[\\s\\S]*$"));
				assertTrue(driver
						.findElement(
								By.xpath(XpathObjectRepo.HOMEFEATUREDCONTAINERLABEL_XPATH))
						.getText().matches(UILablesRepo.HOMEPAGE_FEATURED));
				// assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+videoDetails.get(0).getTitle()+"[\\s\\S]*$"));
				
								
				assertTrue("The Video title is not matching with API value", driver
						.findElement(
								By.xpath(XpathObjectRepo.HOMEFEATUREDFIRSTTITLELABEL_XPATH))
						.getText().matches(videoDetails.get(0).getTitle()));

				Thread.sleep(sleepTime);
				// assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+orProUtil.getProperty("POPULARSHOWS")+"[\\s\\S]*$"));
				assertTrue(driver
						.findElement(
								By.xpath(XpathObjectRepo.HOMEPOPULARSHOWSTITLELABEL_XPATH))
						.getText().matches(UILablesRepo.HOMEPAGE_POPULARSHOWS));
				// assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+videoDetails.get(1).getTitle()+"[\\s\\S]*$"));
				assertTrue(driver
						.findElement(
								By.xpath(XpathObjectRepo.HOMEPOPULARSHOWSFIRSTTITLELABEL_XPATH))
						.getText().matches(videoDetails.get(1).getTitle()));

				Thread.sleep(sleepTime);
				// assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+orProUtil.getProperty("POPULARCHANNELS")+"[\\s\\S]*$"));
				assertTrue(driver
						.findElement(
								By.xpath(XpathObjectRepo.HOMEPOPULARCHANNELSTITLELABEL_XPATH))
						.getText()
						.matches(UILablesRepo.HOMEPAGE_FEATUREDCHANNELS));
				// assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+videoDetails.get(2).getTitle()+"[\\s\\S]*$"));
				assertTrue(driver
						.findElement(
								By.xpath(XpathObjectRepo.HOMEPOPULARCHANNELSFIRSTTITLELABEL_XPATH))
						.getText().matches(videoDetails.get(2).getTitle()));

				// This method is used to logout from Watchable Application.
				userLogin.LogOut(driver);
			}

			// This method is to ensure Login page is displayed when user Sign
			// Out from Application.
			assertionFunction.assertLoginPageDetails();
		} catch (Throwable t) {
			captureScreenshot();
			collector.addError(t);
		}
	}
}
