package comcast.test.app.testCases.myWatchlist;

import static org.junit.Assert.assertTrue;

import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import comcast.test.app.common.UILablesRepo;
import comcast.test.app.common.XpathObjectRepo;
import comcast.test.app.common.AssertionRepo.common.AssertionRepoFunctions;
import comcast.test.app.common.commonFunctions.CommonFun;
import comcast.test.app.testCases.loginPageAndLogin.loginPageFunctions.LoginFun;
import comcast.test.app.testCases.myWatchlist.myWatchlistFunctions.MyWatchlistFun;
import comcast.test.config.configServices.DataServiceProperties;
import comcast.test.config.configServices.utils.BaseTest;

/**
 * Class Name: VerifyMyWatchlistPageVideosSectionDetails
 * Description:This test case verifies video details in video section of MY Shows page
 * present. Author: Manoj
 * **/

public class VerifyMyWatchlistPageVideosSectionDetails extends BaseTest {
	AssertionRepoFunctions assertionFunction = new AssertionRepoFunctions();

	@Test
	public void testVerifyMyWatchlistPageVideosSectionDetails()
			throws Exception {

		try {

			log.info("Script: VerifyMyWatchlistPageVideosSectionDetails");
			log.info("*****************************************************");

			// Navigate to the Home page of the application
			driver.get(DataServiceProperties.HOMEAPPURL);

			// Verify application is opened successfully.
			AssertionRepoFunctions.assertWatchableTitle();
			log.info("Successfully opened the application");

			Thread.sleep(sleepTime);

			// Login to Watchable application
			LoginFun.loginToWatchableApplication(driver, UILablesRepo.USERNAME,
					UILablesRepo.PASSWORD);
			WebElement loginError = driver.findElement(By
					.id(XpathObjectRepo.loginError_ID));

			if (loginError.isDisplayed() == false) {

				// Verify My Shows menu is present
				assertTrue(
						"My Shows menu is not present",
						CommonFun.isElementPresent(driver,
								By.xpath(XpathObjectRepo.myWatchlistMenu_XPATH)));
				log.info("My Shows menu is present");

				// Click on My Shows menu
				MyWatchlistFun.clickOnMyWatchlistMenu();

				// Verify user is navigated to My Shows list page
				AssertionRepoFunctions.assertMyWatchlistPageTitle();

				// Verify my watch list page title
				assertTrue(
						"My Shows menu is not present",
						CommonFun.isElementPresent(
								driver,
								By.xpath(XpathObjectRepo.myWatchlistPageTitle_XPATH)));

				log.info("The title '"
						+ driver.findElement(
								By.xpath(XpathObjectRepo.myWatchlistPageTitle_XPATH))
								.getText() + "' is present in My Shows Page");

				// Verify Video present in my Shows list

				int videoCount = driver.findElements(
						By.xpath(XpathObjectRepo.myWatchlistVideoIcon_XPATH))
						.size();
				if (videoCount > 0) {

					log.info("Videos are displaying in My Shows page");
					log.info("Total number of Videos displaying: " + videoCount);

					
						log.info("Shows names are displaying in My Shows page"); 

						
						log.info("The details of videos oresent in first  row of My Shows page are below");
						log.info("----------------------------------------------------------------------");

						// Getting video details from first in My Shows page
						for (int i = 1; i <= 4; i++) {
							
							/*log.info(XpathObjectRepo.myShowsPageVideoTitlePartOne_XPATH
													+ i + XpathObjectRepo.myShowsPageVideoTitlePartTwo_XPATH);*/
							log.info(i
									+ ". "
									+ driver.findElement(
											By.xpath(XpathObjectRepo.myShowsPageVideoTitlePartOne_XPATH
													+ i + XpathObjectRepo.myShowsPageVideoTitlePartTwo_XPATH)).getText());

							/*log.info("   Video duration: "
									+ driver.findElement(
											By.xpath(XpathObjectRepo.featuredVideoDuration_XPATH
													+ i + "]")).getText());*/

							String channelNameAndLastUpdate = driver
									.findElement(
											By.xpath(XpathObjectRepo.myShowsPageShowTitleLastUpdatedPartOne_XPATH
													+ i
													+ XpathObjectRepo.myShowsPageShowTitleLastUpdatedPartTwo_XPATH))
									.getText();
							/*String array[] = channelNameAndLastUpdate.split("/");
							log.info("   Show Name: " + array[0]);
							log.info("   Last Updated: " + array[1]);*/
							
							log.info("   Last Updated: " + channelNameAndLastUpdate);

							log.info(" ");

						}

						
						log.info("");
					}

					else {
						log.error("My Shows section does not contain videos");
						log.info("");

					}

				} 
			
		}

		catch (Throwable t) {
			captureScreenshot();
			collector.addError(t);
		}

	}
}
