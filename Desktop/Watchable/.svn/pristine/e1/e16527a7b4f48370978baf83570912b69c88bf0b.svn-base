package comcast.test.config.dataServices.playVideos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;

import comcast.test.app.common.AssertionRepo.common.AssertionRepoFunctions;
import comcast.test.app.common.constant.XidioConstant;
import comcast.test.app.common.userManagement.userLogin.common.UserLoginFunctions;
import comcast.test.app.common.videoManagement.homePage.common.HomePageCommonFunctions;
import comcast.test.config.configServices.utils.BaseTest;
import comcast.test.config.configServices.utils.JsonParser;
import comcast.test.config.configServices.utils.RestAPIServices;
import comcast.test.config.configServices.utils.UrlFactoryUtil;
import comcast.test.config.dataServices.registerToXidioApplicationAndChangeAPassword.RegisterToXidioApplicationAndChangeAPassword;
import comcast.test.config.dataServices.vo.VideoDetails;

/**
 * Class Name: DS_PlayPopularVideoDisplayedDirectlyUnderChannels
 * Description: This data service play's Popular Channels video which contains directly under channels 
 * by logging registered user into Gazeebo application.
 * **/

public class DS_PlayPopularVideoDisplayedDirectlyUnderChannels extends BaseTest{
	
	RegisterToXidioApplicationAndChangeAPassword RegUserAndChangePass=new RegisterToXidioApplicationAndChangeAPassword();
	HomePageCommonFunctions homePageCommonFun=new HomePageCommonFunctions();
	UserLoginFunctions userLogin=new UserLoginFunctions();
	AssertionRepoFunctions assertionFunction=new AssertionRepoFunctions();
	
	@Test
	public void testDS_PlayPopularVideoDisplayedDirectlyUnderChannels() throws Exception {

		Map<String, List<VideoDetails>> videoDetails=RestAPIServices.popularChannelsHasShowsOrEpisodes();
		List<VideoDetails> channelList=videoDetails.get("popularChannelHasOnlyEpisodes");
		
		String sessionToken=RestAPIServices.executeGenreAuthentication();
		Actions actions = new Actions(driver); 
		int durationInSeconds=0;
		int durationInMins=0;
	    
		try{
	        
			if(channelList!=null)
			{
				//This method asserts Popular Channels title.
				homePageCommonFun.scrollToPopularChannelsSection();  

				int loopIndex=0;
				if(channelList.size()<2)
					loopIndex=channelList.size();
				else
					loopIndex=2;
					for(int index=0; index<loopIndex; index++)
					{
						VideoDetails channels=channelList.get(index);
						//This Method verifies Channel present in Popular Channel Section and selects a Channel. 
					    homePageCommonFun.selectPopularChannel(channels.getTitle());
					    
			    	    String channelId =channels.getId();
						String  videoResponse =RestAPIServices.getSessionTokenResponse(UrlFactoryUtil.getInstance().getVideoDetailsURL(channelId, 10),sessionToken);
						List<VideoDetails> videoList =JsonParser.parseChannelShowsVideosResponse(videoResponse);
						
						//Select Popular Video.
					    driver.findElement(By.linkText(videoList.get(XidioConstant.selectVideo).getTitle())).click();
					    
					    durationInSeconds=videoList.get(XidioConstant.selectVideo).getDuration();
			    		durationInMins=durationInSeconds/60;
					    
			    		int duration=0;
					    if(durationInMins<2)
					    	duration=durationInMins;
					    else
					    	duration=2;
					    	for(int j=0; j<duration; j++)
					    	{
					    		Thread.sleep(XidioConstant.halfMin);			    		
					    		WebElement videoPage = driver.findElement(By.xpath(".//*[@id='content-video']"));
					    		actions.moveToElement(videoPage);
					    		actions.perform();

					    		String getVideoPlayState=driver.findElement(By.id("playorpause")).getAttribute("class");
					    		assertEquals("pause",getVideoPlayState);

					    	    assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+videoList.get(XidioConstant.selectVideo).getTitle()+"[\\s\\S]*$"));
					    	    
					    	    //This method is to assert Up Next Header
					    	    assertionFunction.assertUpNextTitle();
					    	}
					    }
					    driver.findElement(By.id("playorpause")).click();
					    for(int i=0; i<2; i++)
					    {
					    	driver.navigate().back();
			 	    	    Thread.sleep(sleepTime);
					    }
					    
					    //This method Navigate to Home page.
					    homePageCommonFun.navigateToHomePage();
					}  
	 
			} 
		catch (Throwable t) {
			captureScreenshot();
			collector.addError(t);
		}
   }
}
