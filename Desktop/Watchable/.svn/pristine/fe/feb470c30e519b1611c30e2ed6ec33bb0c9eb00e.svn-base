package comcast.test.app.testCases.videoManagement.videoHomeManagement.PopularChannelsCategoryTestCases.ChannelTestCases.ChannelPageTestCases;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.openqa.selenium.By;

import comcast.test.app.common.UILablesRepo;
import comcast.test.app.common.XpathObjectRepo;
import comcast.test.app.common.AssertionRepo.common.AssertionRepoFunctions;
import comcast.test.app.common.userManagement.userLogin.common.UserLoginFunctions;
import comcast.test.app.common.videoManagement.homePage.common.HomePageCommonFunctions;
import comcast.test.config.configServices.utils.BaseTest;
import comcast.test.config.configServices.utils.RestAPIServices;
import comcast.test.config.dataServices.registerToXidioApplicationAndChangeAPassword.RegisterToXidioApplicationAndChangeAPassword;
import comcast.test.config.dataServices.vo.VideoDetails;

/** 
 * Class Name: VerifyShowCountForHomePopularChannels
 * Description: This test case validates whether Shows count is displayed in channel page for the channel
 * present under Popular Channels section in Home page by logging registered user into Watchable application.
 * **/

public class VerifyShowCountForHomePopularChannels extends BaseTest{
	
	RegisterToXidioApplicationAndChangeAPassword RegUserAndChangePass=new RegisterToXidioApplicationAndChangeAPassword();
	HomePageCommonFunctions homePageCommonFun=new HomePageCommonFunctions();
	UserLoginFunctions userLogin=new UserLoginFunctions();
	AssertionRepoFunctions assertionFunction=new AssertionRepoFunctions();
	
	@Test
	public void testVerifyShowCountForHomePopularChannels() throws Exception {
		
		Map<String, List<VideoDetails>> videoDetails=RestAPIServices.nPopularAPI();
		List<VideoDetails> channelList=videoDetails.get("popularChannelsList");

		try{
			/* This Method is to register new user using Watchable application 
			 * and to change a password. 
			 */
			RegUserAndChangePass.RegisterToComcastAppAndChangePassword(driver);
			
			int loginError = driver
					.findElements(
							By.xpath(XpathObjectRepo.SIGNUPPAGE_INCORRECT_CREDENTIALS_MSG_XPATH))
					.size();

			if (loginError == 0) {
	
			//This method is to ensure Home is Active page when Login into Application.
			assertionFunction.assertHomeActiveLink();
			
			//This method is to assert Watchable Top Middle Menu and to ensure its collapsed.
			//assertionFunction.assertGazeeboTopMiddleMenu();
			
			//This method asserts Popular Channels title.
			assertionFunction.assertPopularChannelsTitle();
			//Lekshmi : Changed Object Identifier to fetch the number of shows
			if(channelList!=null)
			{
			    //This method is to scroll UI to Popular Channels Section. 
			    homePageCommonFun.scrollToPopularChannelsSection(); 
		        
			    int loopMaxIndex=0;
				if(channelList.size()<4)
					loopMaxIndex=channelList.size();
				else
					loopMaxIndex=4;
				String noOfShowsLabel_XPATH = driver.findElement(By.xpath(XpathObjectRepo.HOMEPOPULARCHANNELS_SUBTITLABEL_XPATH)).getText();
				for(int index=0; index<loopMaxIndex; index++)
				{
					VideoDetails channels=channelList.get(index);
					int pos = index + 1;
					int noOfShows = Integer.parseInt(channels.getNumOfShows());
					if(noOfShows==0){
						assertTrue(driver
								.findElement(
										By.xpath(XpathObjectRepo.HOMEPOPULARCHANNELS_SUBTITLABEL_XPATH + "["
												+ pos + "]"))
								.getText()
								.equalsIgnoreCase(
										""));
					}
					else if (noOfShows > 1)
						assertTrue(driver
								.findElement(By.xpath(XpathObjectRepo.HOMEPOPULARCHANNELS_SUBTITLABEL_XPATH+ "["
										+ pos + "]")).getText()
								.equalsIgnoreCase(channels.getNumOfShows() + " SHOWS"));
					else
						assertTrue(driver
								.findElement(
										By.xpath(XpathObjectRepo.HOMEPOPULARCHANNELS_SUBTITLABEL_XPATH + "["
												+ pos + "]"))
								.getText()
								.equalsIgnoreCase(
										channels.getNumOfShows() + " SHOW"));
				 
				    //This Method verifies Channel present in Popular Channel Section and selects a Channel. 
				    homePageCommonFun.selectPopularChannel(channels.getTitle());
				    
				    Thread.sleep(sleepTime);
				    
				    String Showcount=driver.findElement(By.xpath(XpathObjectRepo.CHANNELDETAILSPAGESHOWSDATA_XPATH)).getText();
				    assertEquals(UILablesRepo.CHANNELDETAILSPAGE_SHOWS_TEXT+channels.getNumOfShows()+"",Showcount);
				    
				    driver.navigate().back();
				    Thread.sleep(sleepTime);
				    homePageCommonFun.scrollToSection();
				}
			}
		    
		    //This method is used to logout from Watchable Application.
		    userLogin.LogOut(driver);
		}  
		    //This method is to ensure Login page is displayed when user Sign Out from Application.
		    assertionFunction.assertLoginPageDetails(); 
		} 
		catch (Throwable t) {
			captureScreenshot();
			collector.addError(t);
		}
	}
}
