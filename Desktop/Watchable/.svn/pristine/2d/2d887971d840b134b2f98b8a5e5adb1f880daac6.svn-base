package comcast.test.app.testCases.videoManagement.videoPlay.videoStreamingTestCases;

import java.util.List;
import java.util.Map;
import org.junit.Test;
import org.openqa.selenium.By;
import comcast.test.app.common.XpathObjectRepo;
import comcast.test.app.common.AssertionRepo.common.AssertionRepoFunctions;
import comcast.test.app.common.constant.XidioConstant;
import comcast.test.app.common.userManagement.userLogin.common.UserLoginFunctions;
import comcast.test.app.common.videoManagement.homePage.common.HomePageCommonFunctions;
import comcast.test.config.configServices.FlashObjectWebDriver;
import comcast.test.config.configServices.utils.BaseTest;
import comcast.test.config.configServices.utils.RestAPIServices;
import comcast.test.config.dataServices.registerToXidioApplicationAndChangeAPassword.RegisterToXidioApplicationAndChangeAPassword;
import comcast.test.config.dataServices.vo.VideoDetails;

/**
 * Class Name: VerifyCurrentPosition 
 * Description: This test case is to verify current positon 
 * in video player by logging into Gazeebo application.
 * **/

public class VerifyVolumeControHighAndLowPitch extends BaseTest{
	
	RegisterToXidioApplicationAndChangeAPassword RegUserAndChangePass=new RegisterToXidioApplicationAndChangeAPassword();
	UserLoginFunctions userLogin=new UserLoginFunctions();
	HomePageCommonFunctions homePageCommonFun=new HomePageCommonFunctions();
	AssertionRepoFunctions assertionFunction=new AssertionRepoFunctions();
	
	@Test
	public void testVerifyCurrentPosition() throws Exception {
		
		FlashObjectWebDriver flashApp = new FlashObjectWebDriver(driver, "PlayerPlatformAPI");
		
		Map <String,List<VideoDetails>> videoDetails=RestAPIServices.featuredSectionVideos();
		List <VideoDetails> videoList=videoDetails.get("featuredVideoList");
		double endPosition,startPosition,lastPosition,Postion,nextPosition;
		
		try{
	    	/* This Method is to register new user using Gazeebo application 
			 * and to change a password. 
			 */
			RegUserAndChangePass.RegisterToComcastAppAndChangePassword(driver);
			

			int loginError = driver
					.findElements(
							By.xpath(XpathObjectRepo.SIGNUPPAGE_INCORRECT_CREDENTIALS_MSG_XPATH))
					.size();

			if (loginError == 0) {
			
			//This method is to ensure Home is Active page when Login into Application.
			assertionFunction.assertHomeActiveLink();	
			
			if(videoList!=null)
			{
				//This Method verifies Channel present in Featured list and selects a Channel. 
			    homePageCommonFun.selectFeaturedChannel(videoList.get(XidioConstant.selectVideo).getTitle());
	    	    
			    Thread.sleep(XidioConstant.halfMin);
			    String getEndPosition=flashApp.callFlashObject("getDuration");
				Double tempendPosition=Double.parseDouble(getEndPosition);
				getEndPosition=Integer.valueOf(tempendPosition.intValue()).toString();
				lastPosition=Integer.parseInt(getEndPosition)-10;
				
			    for(int i=0; i<2; i++)
			    {
			    	String currentPosition=flashApp.callFlashObject("getCurrentPosition");
					Double tempcurrentPosition=Double.parseDouble(currentPosition);
					currentPosition=Integer.valueOf(tempcurrentPosition.intValue()).toString();
					int currPostion=Integer.parseInt(currentPosition)-10;
					
			    	if(currPostion<lastPosition)
			    	{
			    		flashApp.callFlashObject("setVolume","0.0");
			    		//getVolume is pending
			    		//String currentVolume=flashApp.callFlashObject("adjustVolume");
			    		
			    		Thread.sleep(XidioConstant.fivesec);
				    	flashApp.callFlashObject("setVolume","1");
					    Thread.sleep(XidioConstant.fivesec);
					    flashApp.callFlashObject("setVolume","20");
					    Thread.sleep(XidioConstant.fivesec);
					    flashApp.callFlashObject("setVolume","40");
					    Thread.sleep(XidioConstant.fivesec);
					    flashApp.callFlashObject("setVolume","5");
					    Thread.sleep(XidioConstant.fivesec);
					    flashApp.callFlashObject("pause");
			    	}
			    }
			}		

			//This method is used to logout from Gazeebo Application.
			userLogin.LogOut(driver);
		}
		}
		catch (Throwable t) {
			captureScreenshot();
			collector.addError(t);
		}	
	}
}




		