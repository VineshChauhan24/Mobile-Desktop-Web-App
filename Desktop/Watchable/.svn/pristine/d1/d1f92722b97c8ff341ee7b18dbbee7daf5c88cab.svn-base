package comcast.test.app.testCases.videoManagement.videoHomeManagement.PopularShowsCategoryTestCases.PopularShowsCategoryPageTestCases;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;

import com.opera.core.systems.scope.protos.ExecProtos.ActionList.Action;

import comcast.test.app.common.XpathObjectRepo;
import comcast.test.app.common.AssertionRepo.common.AssertionRepoFunctions;
import comcast.test.app.common.userManagement.userLogin.common.UserLoginFunctions;
import comcast.test.app.common.videoManagement.homePage.common.HomePageCommonFunctions;
import comcast.test.config.configServices.DataServiceProperties;
import comcast.test.config.configServices.utils.BaseTest;
import comcast.test.config.configServices.utils.RestAPIServices;
import comcast.test.config.dataServices.registerToXidioApplicationAndChangeAPassword.RegisterToXidioApplicationAndChangeAPassword;
import comcast.test.config.dataServices.vo.VideoDetails;

/**
 * Class Name: VerifyAllHomePopularShowsAreDisplayed Description: This test case
 * is to verify Home/Popular Shows category all Shows are displayed and
 * clickable by comparing with API for registered Watchable Application user.
 * **/

public class VerifyAllHomePopularShowsAreDisplayed extends BaseTest {

	// Manoj: Code refactoring done

	RegisterToXidioApplicationAndChangeAPassword RegUserAndChangePass = new RegisterToXidioApplicationAndChangeAPassword();
	AssertionRepoFunctions assertionFunction = new AssertionRepoFunctions();
	UserLoginFunctions userLogin = new UserLoginFunctions();
	HomePageCommonFunctions homePageCommonFun = new HomePageCommonFunctions();

	@Test
	public void testVerifyAllHomePopularShowsAreDisplayed() throws Exception {

		Map<String, List<VideoDetails>> videoDetails = RestAPIServices
				.nHomePopularShowsAPIs();
		List<VideoDetails> popularShowList = videoDetails.get("popularShows");

		try {
			/*
			 * This Method is to register new user using Gazeebo application and
			 * to change a password.
			 */

			// This test case does not required login. So commenting below Login
			// method
			// RegUserAndChangePass.RegisterToComcastAppAndChangePassword(driver);

			// Opening application
			driver.get(DataServiceProperties.HOMEAPPURL);
			Thread.sleep(sleepTime);

			// This method is to ensure Home is Active page when Login into
			// Application.
			assertionFunction.assertHomeActiveLink();

			// This method is to assert Gazeebo Top Middle Menu and to ensure
			// its collapsed.
			// assertionFunction.assertGazeeboTopMiddleMenu(); - Functionality
			// is not implemented

			// This method asserts Popular Shows Header Title.
			assertionFunction.assertPopularShowsTitle();

			// This method is to scroll UI to Popular Channels Section.
			homePageCommonFun.scrollToPopularShowsSection();

			int loopMaxIndex = 0;
			if (popularShowList != null) {
				if (popularShowList.size() < 15)
					loopMaxIndex = popularShowList.size();
				else
					loopMaxIndex = 15;
				int i = 0;
				for (int index = 0; index < loopMaxIndex; index++) {

					VideoDetails showList = popularShowList.get(index);
					int listIndex = popularShowList.indexOf(showList);
					for (; i <= listIndex; i++) {
						int j = (i % 5) + 1;

						// assertEquals(showList.getTitle(),driver.findElement(By.xpath(".//*[@id='popular_shows']/div/section/div/div/ul[1]/li["+j+"]/article/h1/a")).getText());
						assertEquals(
								showList.getTitle(),
								driver.findElement(
										By.xpath("//div[@id='popular_shows']/descendant::ul[1]/descendant::h1["
												+ j + "]/a")).getText());

						// driver.findElement(By.xpath(".//*[@id='popular_shows']/div/section").xpath(".//*[@id='popular_shows']/div/section/div/div/ul[1]/li["+j+"]/article/h1/a")).click();
						driver.findElement(
								By.xpath(
										XpathObjectRepo.HOMEPOPULARSHOWSVIEWROW_XPATH)
										.xpath("//div[@id='popular_shows']/descendant::ul[1]/descendant::h1["
												+ j + "]/a")).click();
						Thread.sleep(sleepTime);

						// assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+showList.getTitle()+"[\\s\\S]*$"));
						assertTrue(driver
								.findElement(
										By.xpath(XpathObjectRepo.SHOWDETAILSHOWTITLE_XPATH))
								.getText().matches(showList.getTitle()));

						driver.navigate().back();
						Thread.sleep(sleepTime);
						//homePageCommonFun.scrollToSection();

						for (int k = 0; k < (i + 1) / 5; k++) {

							// String
							// isNextEnable=driver.findElement(By.xpath(".//*[@id='popular_shows']/div/section/a[2]/span")).getAttribute("class");
							String isNextEnable = driver
									.findElement(
											By.xpath(XpathObjectRepo.HOMEPOPULARSHOWSBUTTONNEXT_XPATH))
									.getAttribute("class");

							if (!isNextEnable.equalsIgnoreCase("next hidden")
									&& !isNextEnable
											.equalsIgnoreCase("next disabled")) {
								// driver.findElement(By.xpath(".//*[@id='popular_shows']/div/section/a[2]/span")).click();
								//homePageCommonFun.scrollToHorizontalSection();
								driver.findElement(
										By.xpath(XpathObjectRepo.HOMEPOPULARSHOWSBUTTONNEXT_XPATH))
										.click();
								/*Actions builder = new Actions(driver);
								WebElement nextLink = driver.findElement(By.xpath(XpathObjectRepo.HOMEPOPULARSHOWSBUTTONNEXT_XPATH));
								Action mouseOverHome = builder.moveToElement(nextLink).build();*/
								Thread.sleep(5000);
							}
						}
					}
				}
			} else {
				boolean isPresent;
				// isPresent=driver.findElement(By.xpath(".//*[@id='popular_shows']/div/section")).findElements(By.xpath(".//*[@id='popular_shows']/div/section/div/div/ul[1]/li[1]/article/a/div/div")).size()>0;
				isPresent = driver
						.findElement(
								By.xpath(XpathObjectRepo.HOMEPOPULARSHOWSVIEWROW_XPATH))
						.findElements(
								By.xpath(XpathObjectRepo.HOMEPOPULARSHOWSICON_XPATH))
						.size() > 0;

				if (isPresent == true) {
					// String
					// showName=driver.findElement(By.xpath(".//*[@id='popular_shows']/div/section")).findElement(By.xpath(".//*[@id='popular_shows']/div/section/div/div/ul[1]/li[1]/article/h1/a")).getText();
					String showName = driver
							.findElement(
									By.xpath(XpathObjectRepo.HOMEPOPULARSHOWSVIEWROW_XPATH))
							.findElement(
									By.xpath(XpathObjectRepo.HOMEPOPULARSHOWSFIRSTTITLELABEL_XPATH))
							.getText();
					// assertFalse(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*"+showName+"[\\s\\S]*$"));
					assertFalse(driver
							.findElement(
									By.xpath(XpathObjectRepo.HOMEPOPULARSHOWSFIRSTTITLELABEL_XPATH))
							.getText().contains(showName));
				}
			}

			// This method asserts Footer Logo and It's Text.
			assertionFunction.assertFooterLogo();

			// This method asserts Footer Copy Right Links.
			assertionFunction.assertFooterCopyRight();

			// This method is used to logout from Gazeebo Application.
			// userLogin.LogOut(driver);

			// This method is to ensure Login page is displayed when user Sign
			// Out from Application.
			assertionFunction.assertLoginPageDetails();
		} catch (Throwable t) {
			captureScreenshot();
			collector.addError(t);
		}
	}
}
